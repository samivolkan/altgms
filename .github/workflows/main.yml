import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  Alert,
  AppState,
  Dimensions
} from 'react-native';
import { LineChart } from 'react-native-chart-kit';

const { width: screenWidth } = Dimensions.get('window');

const App = () => {
  const [parity, setParity] = useState(84.5);
  const [signal, setSignal] = useState('BEKLEMEDE');
  const [buyThreshold, setBuyThreshold] = useState('79');
  const [sellThreshold, setSellThreshold] = useState('87');
  const [updateInterval, setUpdateInterval] = useState('10');
  const [history, setHistory] = useState([]);
  const [chartData, setChartData] = useState({
    labels: [],
    datasets: [{ data: [] }]
  });

  useEffect(() => {
    startParityTracking();
    const interval = setInterval(fetchParityData, parseInt(updateInterval) * 1000);
    return () => clearInterval(interval);
  }, [updateInterval]);

  const fetchParityData = () => {
    const baseValue = 84.5;
    const randomFactor = (Math.random() - 0.5) * 4;
    const newParity = baseValue + randomFactor;
    
    setParity(newParity);
    checkSignal(newParity);
    updateHistory(newParity);
    updateChart(newParity);
  };

  const checkSignal = (value) => {
    const buy = parseFloat(buyThreshold);
    const sell = parseFloat(sellThreshold);
    
    if (value <= buy) {
      setSignal('ALTIN AL / GÜMÜŞ SAT');
      Alert.alert('📈 ALIŞ SİNYALİ', `Parite ${value.toFixed(2)} değerine düştü!`);
    } else if (value >= sell) {
      setSignal('ALTIN SAT / GÜMÜŞ AL');
      Alert.alert('📉 SATIŞ SİNYALİ', `Parite ${value.toFixed(2)} değerine yükseldi!`);
    } else {
      setSignal('BEKLEMEDE');
    }
  };

  const updateHistory = (value) => {
    const newHistory = [
      {
        time: new Date().toLocaleTimeString('tr-TR', { 
          hour: '2-digit', 
          minute: '2-digit' 
        }),
        value: value.toFixed(2)
      },
      ...history.slice(0, 9)
    ];
    setHistory(newHistory);
  };

  const updateChart = (value) => {
    const newData = [...chartData.datasets[0].data, value];
    const newLabels = [...chartData.labels, 
      new Date().toLocaleTimeString('tr-TR', { 
        hour: '2-digit', 
        minute: '2-digit' 
      }).slice(0, 5)
    ];
    
    if (newData.length > 15) {
      newData.shift();
      newLabels.shift();
    }
    
    setChartData({
      labels: newLabels,
      datasets: [{ data: newData }]
    });
  };

  const saveSettings = () => {
    Alert.alert('✅ Başarılı', 'Ayarlar kaydedildi!');
  };

  const getSignalStyle = () => {
    if (signal.includes('ALIŞ')) return styles.signalBuy;
    if (signal.includes('SATIŞ')) return styles.signalSell;
    return styles.signalNeutral;
  };

  const startParityTracking = () => {
    fetchParityData();
  };

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>🥇 Altın-Gümüş Parite</Text>
        <Text style={styles.subtitle}>Akıllı Al-Sat Sinyalleri</Text>
      </View>

      <View style={styles.card}>
        <Text style={styles.cardTitle}>📊 Mevcut Parite</Text>
        <Text style={styles.parityValue}>{parity.toFixed(2)}</Text>
        <Text style={styles.updateTime}>
          Son güncelleme: {new Date().toLocaleTimeString('tr-TR')}
        </Text>
      </View>

      <View style={styles.card}>
        <Text style={styles.cardTitle}>🚦 Sinyal Durumu</Text>
        <Text style={[styles.signal, getSignalStyle()]}>{signal}</Text>
      </View>

      <View style={styles.card}>
        <Text style={styles.cardTitle}>⚙️ Ayarlar</Text>
        
        <Text style={styles.label}>Alış Sınırı (≤)</Text>
        <TextInput
          style={styles.input}
          value={buyThreshold}
          onChangeText={setBuyThreshold}
          keyboardType="numeric"
        />
        
        <Text style={styles.label}>Satış Sınırı (≥)</Text>
        <TextInput
          style={styles.input}
          value={sellThreshold}
          onChangeText={setSellThreshold}
          keyboardType="numeric"
        />
        
        <Text style={styles.label}>Güncelleme (saniye)</Text>
        <TextInput
          style={styles.input}
          value={updateInterval}
          onChangeText={setUpdateInterval}
          keyboardType="numeric"
        />
        
        <TouchableOpacity style={styles.button} onPress={saveSettings}>
          <Text style={styles.buttonText}>💾 Ayarları Kaydet</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.card}>
        <Text style={styles.cardTitle}>📈 Parite Grafiği</Text>
        <LineChart
          data={chartData}
          width={screenWidth - 40}
          height={220}
          chartConfig={{
            backgroundColor: '#2c3e50',
            backgroundGradientFrom: '#3498db',
            backgroundGradientTo: '#2980b9',
            decimalPlaces: 2,
            color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
            labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
          }}
          bezier
          style={styles.chart}
        />
      </View>

      <View style={styles.card}>
        <Text style={styles.cardTitle}>📋 Son Değerler</Text>
        {history.map((item, index) => (
          <View key={index} style={styles.historyItem}>
            <Text style={styles.historyTime}>{item.time}</Text>
            <Text style={styles.historyValue}>{item.value}</Text>
          </View>
        ))}
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#1a2a3a' },
  header: { padding: 20, alignItems: 'center', backgroundColor: '#2c3e50' },
  title: { fontSize: 24, fontWeight: 'bold', color: '#f1c40f' },
  subtitle: { fontSize: 16, color: '#bdc3c7', marginTop: 5 },
  card: { backgroundColor: '#2c3e50', margin: 10, padding: 15, borderRadius: 10 },
  cardTitle: { fontSize: 18, fontWeight: 'bold', color: '#ecf0f1', marginBottom: 10 },
  parityValue: { fontSize: 32, fontWeight: 'bold', color: '#f1c40f', textAlign: 'center', marginVertical: 10 },
  updateTime: { textAlign: 'center', color: '#bdc3c7' },
  signal: { fontSize: 16, fontWeight: 'bold', textAlign: 'center', padding: 10, borderRadius: 8, marginVertical: 5 },
  signalBuy: { backgroundColor: 'rgba(46, 204, 113, 0.2)', color: '#2ecc71' },
  signalSell: { backgroundColor: 'rgba(231, 76, 60, 0.2)', color: '#e74c3c' },
  signalNeutral: { backgroundColor: 'rgba(243, 156, 18, 0.2)', color: '#f39c12' },
  label: { color: '#bdc3c7', marginBottom: 5, marginTop: 10 },
  input: { backgroundColor: '#34495e', color: '#ecf0f1', padding: 10, borderRadius: 5 },
  button: { backgroundColor: '#e67e22', padding: 15, borderRadius: 8, alignItems: 'center', marginTop: 15 },
  buttonText: { color: 'white', fontWeight: 'bold', fontSize: 16 },
  chart: { marginVertical: 8, borderRadius: 16 },
  historyItem: { flexDirection: 'row', justifyContent: 'space-between', paddingVertical: 8, borderBottomWidth: 1, borderBottomColor: '#34495e' },
  historyTime: { color: '#bdc3c7' },
  historyValue: { color: '#f1c40f', fontWeight: 'bold' },
});

export default App;
